// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id                   String         @id @default(cuid())
  name                 String
  dateOfBirth          DateTime?      @db.Date
  addressId            String?
  username             String?        @unique
  email                String         @unique
  password             String
  phoneNumber          String?
  role                 Role           @default(PATIENT)
  emailVerified        DateTime?
  image                String?
  address              Address?       @relation(fields: [addressId], references: [id], onDelete: Cascade)
  beds                 Bed[]
  invoices             Invoice[]
  payments             Payment[]
  prescriptions        Prescription[]
  vitals               VitalsReport[]
  authoredSoapNotes    SoapNote[]
  visitReports         VisitReport[]  @relation("VisitReport")
  authoredVisitReports VisitReport[]  @relation("AuthoredVisitReport")
}

model Bed {
  id        String   @id @default(cuid())
  room      String
  occupant  User?    @relation(fields: [userId], references: [id])
  userId    String?  @unique
  building  Address? @relation(fields: [addressId], references: [id])
  addressId String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Address {
  id      String @id @default(cuid())
  street  String
  city    String
  state   String
  zipCode Int
  users   User[]
  Bed     Bed[]
}

enum Role {
  ADMIN
  PATIENT
  NURSE
  DOCTOR
}

// stores the availability for appointments to be made (removed from when appointments created)
model Availability {
  id        String   @id @default(cuid())
  day       Int
  startTime String
  endTime   String
  docId     String
  date      DateTime @db.Date
}

// stores the original availability (not removed for appointments that are created)
model OriginalAvailability {
  id        String   @id @default(cuid())
  day       Int
  startTime String
  endTime   String
  docId     String
  date      DateTime @db.Date
}

model Appointment {
  id        String   @id @default(cuid())
  day       Int
  startTime String
  endTime   String
  docId     String
  userId    String
  date      DateTime @db.Date
}

model Hours {
  id        String @id @default(cuid())
  startHour Int    @default(7)
  endHour   Int    @default(19)
}

model Rate {
  id          String     @id @default(cuid())
  name        String
  description String
  price       String
  lineItems   LineItem[]
}

model Meds {
  id        String    @id @default(cuid())
  name      String
  dosageMin String
  dosageMax String
  unit      String
  meds      MedItem[]
}

model LineItem {
  id        String  @id @default(cuid())
  quantity  Int
  rateId    String?
  invoiceId String
  total     String
  invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  rate      Rate?   @relation(fields: [rateId], references: [id], onDelete: SetNull)
}

model Invoice {
  id         String     @id @default(cuid())
  paymentDue DateTime
  total      String     @default("0")
  totalDue   String     @default("0")
  items      LineItem[]
  payments   Payment[]
  userId     String?
  User       User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model Prescription {
  id     String    @id @default(cuid())
  userId String?
  User   User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  meds   MedItem[]
}

model MedItem {
  id             String       @id @default(cuid())
  dosage         String
  dosageFreq     String
  prescriptionId String
  medsId         String
  prescription   Prescription @relation(fields: [prescriptionId], references: [id], onDelete: Cascade)
  med            Meds?        @relation(fields: [medsId], references: [id], onDelete: Cascade)
}

enum PaymentSourceType {
  CARD
  BANK
}

model PaymentSource {
  id      String            @id @default(cuid())
  name    String
  type    PaymentSourceType
  Payment Payment[]
}

model Payment {
  id        String         @id @default(cuid())
  date      DateTime       @db.Date
  amount    String
  sourceId  String?
  source    PaymentSource? @relation(fields: [sourceId], references: [id], onDelete: SetNull)
  invoiceId String?
  invoice   Invoice?       @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  userId    String?
  user      User?          @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model SoapNote {
  id                String      @id @default(cuid())
  subjective        String
  objective         String
  assessment        String
  plan              String
  doctorId          String?
  author            User?       @relation(fields: [doctorId], references: [id], onDelete: SetNull)
  postVisitReportId String      @unique
  postVisitReport   VisitReport @relation(fields: [postVisitReportId], references: [id], onDelete: Cascade)
}

model VitalsReport {
  id                String      @id @default(cuid())
  date              DateTime    @db.Date
  pulse             Float
  temperature       Float
  weight            Float
  respiration       Float
  oxygenSaturation  Float
  patientId         String
  patient           User?       @relation(fields: [patientId], references: [id], onDelete: Cascade)
  postVisitReportId String      @unique
  postVisitReport   VisitReport @relation(fields: [postVisitReportId], references: [id], onDelete: Cascade)
}

model VisitReport {
  id        String        @id @default(cuid())
  date      DateTime @db.Date
  doctorId  String?
  author    User?         @relation("AuthoredVisitReport", fields: [doctorId], references: [id], onDelete: SetNull)
  patientId String
  patient   User?         @relation("VisitReport", fields: [patientId], references: [id], onDelete: Cascade)
  vitals    VitalsReport?
  soapNotes SoapNote?
}
